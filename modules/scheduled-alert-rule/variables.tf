# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

variable "workload_name" {
  description = "Name of the workload. This will be used to name the resources deployed by this module."
  type        = string
}

variable "deploy_environment" {
  description = "Name of the workload's environnement (dev, test, prod, etc). This will be used to name the resources deployed by this module. default is 'dev'"
  type        = string
}

variable "name" {
  description = "The name to assign to the alert rule."
  type        = string
}

variable "log_analytics_workspace_id" {
  description = "The ID of the Log Analytics workspace in which Azure Sentinel is deployed."
  type        = string
}

variable "display_name" {
  description = "The friendly name of this rule."
  type        = string
}

variable "severity" {
  description = "The severity of the alert generated by this rule. One of `High`, `Medium`, `Low`, or `Informational`."
  type        = string
}

variable "query" {
  description = "The Kusto (KQL) query run by this rule."
  type        = string
}

variable "tactics" {
  description = "A set of attack categories by which to classify the rule. Any of `Collection`, `CommandAndControl`, `CredentialAccess`, `DefenseEvasion`, `Discovery`, `Execution`, `Exfiltration`, `Impact`, `InitialAccess`, `LateralMovement`, `Persistence`, and `PrivilegeEscalation`."
  type        = set(string)
}

variable "techniques" {
  description = "A set of attack techniques that represent 'how' an adversary achieves a tactical goal by performing an action."
  type        = set(string)
}

variable "description" {
  description = "The rule description."
  type        = string
}

variable "enabled" {
  description = "Whether or not this rule is enabled."
  type        = bool
  default     = true
}

variable "query_frequency" {
  description = "The ISO 8601 timespan duration between two consecutive queries."
  type        = string
  default     = "PT5H"
}

variable "query_period" {
  description = "The ISO 8601 timespan duration which determines the time period of the data covered by the query."
  type        = string
  default     = "PT5H"
}

variable "suppression_duration" {
  description = "When `suppression_enabled` is `true`, the amount of time the query should stop running after an alert is created, expressed as an ISO 8601 timespan."
  type        = string
  default     = "PT5H"
}

variable "suppression_enabled" {
  description = "Whether or not the rule should be prevented from running after an alert is generated."
  type        = bool
  default     = false
}

variable "aggregation_method" {
  description = "The aggregation method to apply to the query results. One of `Count`, `Maximum`, `Minimum`, `Average`, `Total`, `None`."
  type        = string
  default     = "Count"
}

variable "trigger_operator" {
  description = "The alert trigger operator applied to `trigger_threshold`. One of `Equal`, `GreaterThan`, `LessThan`, `NotEqual`."
  type        = string
  default     = "GreaterThan"
}

variable "trigger_threshold" {
  description = "The threshold of query results returned, compared by `trigger_operator`, that would cause this rule to trigger an alert."
  type        = string
  default     = "0"
}

variable "create_incident" {
  description = "Whether or not an incident should be created from alerts triggered by this rule."
  type        = bool
  default     = false
}

variable "grouping" {
  description = "Enable grouping of incidents created from alerts triggered by this rule."
  type        = bool
  default     = true
}

variable "lookback_duration" {
  description = "The duration of time in which new alerts should be associated to an existing related incident (in ISO 8601 duration format)."
  type        = string
  default     = "PT5H"
}

variable "reopen_closed_incidents" {
  description = "Whether or not to re-open existing incidents when new alerts are triggered. When set to `true` incidents are re-opened and new alerts are associated to them. When set to `false` a new incident is created."
  type        = bool
  default     = false
}

variable "entity_matching_method" {
  description = "The method used to group incidents."
  type        = string
  default     = "AnyAlert"

  validation {
    condition     = contains(["AnyAlert", "Selected", "AllEntities"], var.entity_matching_method)
    error_message = "The entity_matching_method items contain non-valid value. Possible values are AnyAlert, Selected and AllEntities."
  }
}

variable "group_by_entities" {
  description = "A list of entity types to group by, only when the entity_matching_method is Selected."
  type        = list(string)
  default     = []

  validation {
    condition     = !contains([for item in var.group_by_entities : contains(["Account", "AzureResource", "CloudApplication", "DNS", "File", "FileHash", "Host", "IP", "Mailbox", "MailCluster", "MailMessage", "Malware", "Process", "RegistryKey", "RegistryValue", "SecurityGroup", "SubmissionMail", "URL"], item)], false)
    error_message = "The list contains one or more invalid values. Possible values are Account, AzureResource, CloudApplication, DNS, File, FileHash, Host, IP, Mailbox, MailCluster, MailMessage, Malware, Process, RegistryKey, RegistryValue, SecurityGroup, SubmissionMail, URL."
  }
}

variable "group_by_alert_details" {
  description = "A list of alert details to group by, only when the entity_matching_method is Selected."
  type        = list(string)
  default     = []
}

variable "group_by_custom_details" {
  description = "A list of custom details keys to group by, only when the entity_matching_method is Selected."
  type        = list(string)
  default     = []
}

variable "entity_mappings" {
  description = "A list of entities or categories that are associated to the data that is being sent to Sentinel."
  type = list(object({
    entity_type = string
    field_mappings = list(object({
      identifier = string
      column_name = string
    }))
  }))
  default = []
}
